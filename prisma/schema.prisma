generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin", "darwin-arm64"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      String    @default("USER")
  phone     String?
  address   String?
  avatar    String?
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  projects  Project[]
  sessions  Session[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id             String           @id @default(uuid())
  name           String
  description    String?
  userId         String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  greenSpaceData GreenSpaceData[]
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  resourceData   ResourceData[]
  trafficData    TrafficData[]
}

model TrafficData {
  id        String   @id @default(uuid())
  projectId String
  location  String
  density   Int
  timestamp DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ResourceData {
  id        String   @id @default(uuid())
  projectId String
  type      String
  usage     Float
  timestamp DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model GreenSpaceData {
  id        String   @id @default(uuid())
  projectId String
  location  String
  area      Float
  type      String
  timestamp DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
